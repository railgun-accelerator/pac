// Generated by CoffeeScript 1.9.3
(function() {
  var app, child_process, dns, express, fs;

  fs = require('fs');

  dns = require('dns');

  child_process = require('child_process');

  express = require('express');

  app = express();

  app.set('view engine', 'hjs');

  app.get(/([a-z])(\d+)(-[-\w]*)?(\..+)?/, function(req, res) {
    var domain, params, port, template;
    console.log(req.params);
    domain = req.params[0] + '.lv5.ac';
    port = parseInt(req.params[1]);
    if (req.params[2]) {
      params = req.params[2].split('-');
    }
    console.log(req.params[3]);
    switch (req.params[3]) {
      case '.smartproxy':
        return res.render('smartproxy', {
          proxy: address + ':' + req.params[1]
        });
      case '.mobileconfig':
        if (params[params.length - 1] === 'legacy') {
          template = 'ios-legacy';
        } else {
          template = 'ios';
        }
        return app.render(template, {
          username: params[1],
          password: req.params[1],
          host: domain
        }, function(err, mobileconfig) {
          var openssl;
          console.log(mobileconfig);
          openssl = child_process.execFile('openssl', ['smime', '-sign', '-signer', 'railgun.ac.crt', '-inkey', 'railgun.ac.key', '-certfile', 'intermediate_domain_ca.crt', '-nodetach', '-outform', 'der'], {
            encoding: 'buffer'
          }, function(error, stdout, stderr) {
            if (err) {
              return res.status(500).send(err);
            }
            if (stderr.length > 0) {
              return res.status(500).send(stderr);
            }
            res.type('application/x-apple-aspen-config');
            return res.end(stdout);
          });
          return openssl.stdin.end(mobileconfig);
        });
      default:
        return dns.resolve(req.params[0] + '.lv5.ac', function(err, address, family) {
          if (err) {
            return res.status(500).send(err);
          }
          res.type('application/x-ns-proxy-autoconfig');
          return res.render('proxy', {
            https_proxy: domain + ":" + (port + 1),
            http_proxy: address + ":" + port,
            http_proxy: domain + ":" + port
          });
        });
    }
  });

  if (fs.existsSync('/var/run/railgun-profiles.sock')) {
    fs.unlinkSync('/var/run/railgun-profiles.sock');
  }

  app.listen('/var/run/railgun-profiles.sock');

}).call(this);

//# sourceMappingURL=app.js.map
